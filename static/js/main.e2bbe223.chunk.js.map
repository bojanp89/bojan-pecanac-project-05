{"version":3,"sources":["Header.js","App.js","Print.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","name","value","handleSubmit","preventDefault","isLoading","getCountries","state","country","url","axios","method","then","response","apiResults","data","currencies","languages","react","className","src_Header","action","onSubmit","type","placeholder","onChange","length","code","capital","population","src","flag","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAYeA,mLARP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6CAJKC,IAAMC,WCsFZC,GCrFKF,IAAMC,sBDSxB,SAAAC,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAUFI,aAAe,SAAAC,GACbR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACGO,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,SAbxBb,EAiBdc,aAAe,SAAAN,GACbA,EAAMO,iBACNf,EAAKS,SAAS,CACZO,WAAW,IAEbhB,EAAKiB,aAAajB,EAAKkB,MAAMC,UAtBjBnB,EAyBdiB,aAAe,SAACG,GACdC,IAAM,CACJC,OAAQ,MACRF,IAAK,yCAA2CA,IAC/CG,KAAK,SAAAC,GACNxB,EAAKS,SAAS,CACZO,WAAW,EACXS,WAAYD,EAASE,KAAK,GAC1BC,WAAYH,EAASE,KAAK,GAAGC,WAAW,GACxCC,UAAWJ,EAASE,KAAK,GAAGE,UAAU,QAhC1C5B,EAAKkB,MAAQ,CACXO,WAAY,GACZN,QAAS,GACTH,UAAW,GACXW,WAAY,GACZC,UAAW,IAPD5B,sIAwCZ,OACEN,EAAAC,EAAAC,cAACiC,EAAA,SAAD,KACEnC,EAAAC,EAAAC,cAAA,OAAKkC,UAAY,WACjBpC,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,YACAF,EAAAC,EAAAC,cAAA,QAAMoC,OAAO,SAASC,SAAU9B,KAAKW,cACnCpB,EAAAC,EAAAC,cAAA,SACEsC,KAAK,OACLC,YAAY,gBACZC,SAAUjC,KAAKI,aACfK,KAAK,UACLC,MAAOV,KAAKe,MAAMC,UAEpBzB,EAAAC,EAAAC,cAAA,UAAQsC,KAAK,UAAb,iBAGD/B,KAAKe,MAAMF,UACVtB,EAAAC,EAAAC,cAAA,qBAEiC,IAAjCO,KAAKe,MAAMO,WAAWY,QACtB3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKO,KAAKe,MAAMO,WAAWb,MAC3BlB,EAAAC,EAAAC,cAAA,wBAAgBO,KAAKe,MAAMS,WAAWW,KAAtC,IAA6CnC,KAAKe,MAAMS,WAAWf,MACnElB,EAAAC,EAAAC,cAAA,qBAAaO,KAAKe,MAAMO,WAAWc,SACnC7C,EAAAC,EAAAC,cAAA,sBAAcO,KAAKe,MAAMU,UAAUhB,MACnClB,EAAAC,EAAAC,cAAA,wBAAgBO,KAAKe,MAAMO,WAAWe,YACtC9C,EAAAC,EAAAC,cAAA,OAAK6C,IAAKtC,KAAKe,MAAMO,WAAWiB,kBAxE1B5C,cEME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.e2bbe223.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Quick Look Travel Guide</h1>\n            </div>\n        )\n    }\n}\n\nexport default Header","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Header from './Header';\nimport Print from './Print';\n\nclass App extends Component {\n  // call the getCountries function once the component has been mounted\n  componentDidMount() {\n  }\n\n  // setting the initial state of the app.\n  constructor() {\n    super();\n    this.state = {\n      apiResults: [],\n      country: '',\n      isLoading: '',\n      currencies: '',\n      languages: '',\n    }\n  }\n\n  handleChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    this.setState({\n      isLoading: true\n    })\n    this.getCountries(this.state.country);\n  };\n\n  getCountries = (url) => {\n    axios({\n      method: 'GET',\n      url: 'https://restcountries.eu/rest/v2/name/' + url,\n    }).then(response => {\n      this.setState({\n        isLoading: false,\n        apiResults: response.data[0],\n        currencies: response.data[0].currencies[0],\n        languages: response.data[0].languages[0]\n      })\n    })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <div className = 'wrapper'>\n        <Header />\n        <main>\n        <form action=\"submit\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter country\"\n            onChange={this.handleChange}\n            name=\"country\"\n            value={this.state.country}\n          />\n          <button type=\"submit\">Find Country</button>\n        </form>\n\n        {this.state.isLoading ? (\n          <p>Loading:</p>\n        ) : (\n          this.state.apiResults.length !== 0 && \n          <div>\n            <h2>{this.state.apiResults.name}</h2>\n            <p>Currencies: {this.state.currencies.code} {this.state.currencies.name}</p>\n            <p>Capital: {this.state.apiResults.capital}</p>\n            <p>Language: {this.state.languages.name}</p>\n            <p>Population: {this.state.apiResults.population}</p>\n            <img src={this.state.apiResults.flag} />\n        </div>\n        )}\n        </main>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\n\n// create a stateful component which will display the information based on which object(countries) in the array has been selected.\nclass Print extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            // name: {}\n        }\n        console.log(this.state)\n    }\n    \n    // if user searches \"Canada\", print the information of the object that has a 'name property' of 'canada.'\n    // map over countriesArray, if the text input equals the object that has a 'name property' of it, print it below.\n    render() {\n        return (\n            <div>\n                <h2></h2>\n            </div>\n        )\n    }\n}\n\nexport default Print","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}